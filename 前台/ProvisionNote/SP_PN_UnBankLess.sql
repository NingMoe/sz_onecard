/* ------------------------------------
COPYRIGHT (C) 2010-2015 LINKAGE SOFTWARE 
 ALL RIGHTS RESERVED.
<AUTHOR>JIANGBB</AUTHOR>
<CREATEDATE>2014-08-08</CREATEDATE>
<DESCRIPTION>不匹配银行帐务确认</DESCRIPTION>
------------------------------------ */
CREATE OR REPLACE PROCEDURE SP_PN_UNBANKLESS
(
	P_SESSIONID			VARCHAR2,	--SESSIONID
	
	P_CURROPER          CHAR,
    P_CURRDEPT          CHAR,
    P_RETCODE   		OUT CHAR, -- RETURN CODE
    P_RETMSG    		OUT VARCHAR2  -- RETURN MESSAGE
)
AS		
    V_SEQ				CHAR(16);
	V_TRADEID			VARCHAR2(30);
	V_SYNTAG			CHAR(1);
	V_USEDMONEY			INT;			--已使用金额
	V_LEFTMONEY			INT;			--未使用金额
	V_BANKMONEY			INT;			--需要匹配的银行金额
	V_TRADEMONEY		INT;			--需要匹配的业务金额
	V_RELMONEY			INT;			--真实每次最小匹配的金额
	V_POSBANKCOUNT		INT:= 0;		--勾选的银行总金额
	V_NETATRADECOUNT	INT:= 0;		--勾选的业务总金额
	V_SCOPECODE			CHAR(2);
	V_TODAY         	DATE := SYSDATE;
	V_RSRV1				VARCHAR(10);
	V_EX				EXCEPTION;
BEGIN

	--银行业务正数金额总数
	BEGIN
	SELECT SUM(DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY)) INTO V_POSBANKCOUNT FROM TF_F_BFJ_OCAB T
	WHERE TRADEID IN ( SELECT F3 FROM TMP_COMMON WHERE F1 = '0');
	EXCEPTION
		WHEN NO_DATA_FOUND THEN NULL;
	END;
	
	--银行业务负数金额总数
	BEGIN
	SELECT SUM(DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY)) INTO V_NETATRADECOUNT FROM TF_F_BFJ_OCAB T
	WHERE TRADEID IN ( SELECT F3 FROM TMP_COMMON WHERE F1 = '1');
	EXCEPTION
		WHEN NO_DATA_FOUND THEN NULL;
	END;
	
	IF ABS(V_POSBANKCOUNT) != ABS(V_NETATRADECOUNT) THEN
		P_RETCODE := 'S05001B031'; 
		P_RETMSG  := '匹配金额之和不为零';
		ROLLBACK; RETURN;
	END IF;
	
	<<outer>>
	FOR V_C IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '0' ORDER BY F2) LOOP
		
		--此次需要匹配的银行金额
		V_BANKMONEY := V_C.F2;
		
		--循环业务
		<<inner>>
		FOR	V_D IN (SELECT F2,F3,F4 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1' ORDER BY F2) LOOP
			--GET TRADE ID
			SP_GETSEQ(SEQ => V_SEQ);
			--每次循环时，此次匹配金额重置为0
			V_RELMONEY := 0;
			
			--查询银行负数数据
			BEGIN
			SELECT DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY),DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY),T.TRADEID INTO V_USEDMONEY,V_LEFTMONEY,V_TRADEID
			FROM TF_F_BFJ_OCAB T  WHERE T.TRADEID = V_D.F3;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					P_RETCODE := 'S05001B001'; P_RETMSG  := '查询银行备付金交易明细表失败,' || SQLERRM;
					ROLLBACK; RETURN;
			END;
			
			--业务未使用金额为0表示勾选的业务已经匹配过了，不需要再次匹配
			IF V_LEFTMONEY != 0 THEN 
			
				--银行金额>业务未使用金额
				IF V_BANKMONEY >= ABS(V_LEFTMONEY) THEN
					--此次匹配的金额
					V_RELMONEY := ABS(V_LEFTMONEY);
					--剩余未匹配的银行金额--用以循环业务表再次匹配
					V_BANKMONEY := V_BANKMONEY - ABS(V_LEFTMONEY);
				ELSE
					--此次匹配的金额
					V_RELMONEY := V_BANKMONEY;
					--剩余未匹配的银行金额
					V_BANKMONEY :=0;
				END IF;
			
				--更新备付金业务关联明细表
				BEGIN
					INSERT INTO TF_B_BFJ_UNCHECK
					(TRADEID,POSBANKTRADEID,NETABANKTRADEID,TRADECODE,MONEY,
					POSBANKUSEDMONEY,POSBANKLEFTMONEY,NETATRADEUSEDMONEY,NETATRADELEFTMONEY,
					OPERATESTAFFNO,OPERATETIME)
					SELECT V_SEQ,TRADEID,V_TRADEID,'1',V_RELMONEY,
					NVL(USEDMONEY,0),DECODE(LEFTMONEY,NULL,TRADECHARGE,LEFTMONEY),V_USEDMONEY,V_LEFTMONEY,
					P_CURROPER,V_TODAY
					FROM TF_F_BFJ_OCAB T WHERE T.TRADEID = V_C.F3;
					
					IF  SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
					EXCEPTION WHEN OTHERS THEN
						P_RETCODE := 'S05001B002'; P_RETMSG  := '更新不匹配账单关联台账表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--更新账单关联表
				BEGIN
					INSERT INTO TF_F_BFJ_UNBANKRELATION
					(TRADEID,POSBANKTRADEID,NETABANKTRADEID,MONEY,UPDATESTAFFNO,UPDATETIME)
					VALUES(V_SEQ,V_C.F3,V_TRADEID,V_RELMONEY,P_CURROPER,V_TODAY);
					EXCEPTION
						WHEN OTHERS THEN
							P_RETCODE := 'S05001B003'; P_RETMSG  := '更新不匹配账单关联表失败,' || SQLERRM;
							ROLLBACK; RETURN;
				END;
				
				--更新银行正数数据
				BEGIN
				UPDATE TF_F_BFJ_OCAB T
					SET T.LEFTMONEY = DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY) - V_RELMONEY,
						T.USEDMONEY = DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY) + V_RELMONEY
				WHERE T.TRADEID = V_C.F3;
				EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B005'; P_RETMSG :='更新银行备付金交易表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;
				
				--更新银行负数数据
				BEGIN
					UPDATE TF_F_BFJ_OCAB T
					SET T.LEFTMONEY = DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY) + V_RELMONEY,
						T.USEDMONEY = DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY) - V_RELMONEY
					WHERE T.TRADEID = V_TRADEID;
					EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B004'; P_RETMSG :='更新银行备付金明细表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;
				
				--当需要匹配的银行金额为0时，此次匹配结束，跳出循环，继续下次银行与业务的匹配
				EXIT WHEN V_BANKMONEY = 0 ;
			END IF;
		END LOOP inner;
	END LOOP outer;
	

    P_RETCODE := '0000000000'; P_RETMSG := '';
    COMMIT;RETURN;
END;
/

SHOW ERRORS