/* ------------------------------------
COPYRIGHT (C) 2010-2015 LINKAGE SOFTWARE 
 ALL RIGHTS RESERVED.
<AUTHOR>JIANGBB</AUTHOR>
<CREATEDATE>2014-08-08</CREATEDATE>
<DESCRIPTION>解款确认存储过程</DESCRIPTION>
------------------------------------ */
CREATE OR REPLACE PROCEDURE SP_PN_DEPTTRANSFERADD
(
	P_SESSIONID			VARCHAR2,	--SESSIONID
	P_DEPTID			CHAR,		--解款部门
	
	P_CURROPER          CHAR,
    P_CURRDEPT          CHAR,
    P_RETCODE   		OUT CHAR, -- RETURN CODE
    P_RETMSG    		OUT VARCHAR2  -- RETURN MESSAGE
)
AS		
    V_SEQ				CHAR(16);
	V_TRADEID			VARCHAR2(30);
	V_SYNTAG			CHAR(1);
	V_TRADEDATE			CHAR(8);
	V_USEDMONEY			INT;
	V_LEFTMONEY			INT;
	V_BANKMONEY			INT;			--需要匹配的银行金额
	V_TRADEMONEY		INT;			--需要匹配的业务金额
	V_RELMONEY			INT;			--真实每次最小匹配的金额
	V_TMPCOUNT			INT;
	V_BANKCOUNT			INT:= 0;
	V_TRADECOUNT		INT:= 0;
	V_TASK				INT:= 0;
	V_SCOPECODE			CHAR(2);
	V_TODAY         	DATE := SYSDATE;
	V_RSRV1				VARCHAR(10);
	V_EX				EXCEPTION;
BEGIN

	--银行勾选数量
	BEGIN
	SELECT COUNT(1) INTO V_BANKCOUNT FROM TMP_COMMON WHERE F1 = '0';
	EXCEPTION
		WHEN NO_DATA_FOUND THEN NULL;
	END;
	
	--业务勾选数量
	BEGIN
	SELECT COUNT(1) INTO V_TRADECOUNT FROM TMP_COMMON WHERE F1 = '1';
	EXCEPTION
		WHEN NO_DATA_FOUND THEN NULL;
	END;
	
	
	--校验解款日期是否是最早解款日期
	--查询业务最早解款日期
	BEGIN
		SELECT TRADEDATE INTO V_TRADEDATE FROM(
		SELECT TO_CHAR(TRADEDATE,'YYYYMMDD') TRADEDATE
		FROM TF_F_BFJ_TRADERECORD T WHERE T.LEFTMONEY != 0 AND T.ISNEEDMATCH = '0' AND T.AMOUNTTYPE = '0'
		AND T.TRADETYPECODE NOT IN ('02','03','08','10','11','12','13') AND T.DEPARTID = P_DEPTID ORDER BY T.TRADEDATE)
		WHERE ROWNUM = 1;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			NULL;
	END;
	
	--最早解款日期为空表示为第一次解款
	IF V_TRADEDATE IS NOT NULL THEN
		--查询勾选业务信息中是否存在最早解款日期
		BEGIN
		SELECT F3 INTO V_TMPCOUNT FROM
		(SELECT F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1' AND F4 = V_TRADEDATE ORDER BY F4)
		WHERE ROWNUM = 1;
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
				P_RETCODE :='S05001B113'; P_RETMSG :='有日期为'||V_TRADEDATE||'未解款，请从该日开始解款';
				ROLLBACK; RETURN;
		END;
	END IF;
	
	--银行多于业务
	IF V_BANKCOUNT >= V_TRADECOUNT THEN
		<<outer>>
		FOR V_C IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '0') LOOP
			
			V_BANKMONEY := V_C.F2;
			
			--循环业务
			<<inner>>
			FOR	V_D IN (SELECT F2,F3,F4 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1' ORDER BY F2 DESC) LOOP
				--GET TRADE ID
				SP_GETSEQ(SEQ => V_SEQ);
				
				--每次循环时，此次匹配金额重置为0
				V_RELMONEY := 0;
			
				--查询网点业务的已匹配金额
				BEGIN
				SELECT DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY),DECODE(T.LEFTMONEY,NULL,0,T.LEFTMONEY),T.TRADEID INTO V_USEDMONEY,V_LEFTMONEY,V_TRADEID
				FROM TF_F_BFJ_TRADERECORD T WHERE T.TRADEID = V_D.F3;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						P_RETCODE := 'S05001B001'; P_RETMSG  := '查询网点业务信息失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--业务未使用金额为0表示勾选的业务已经匹配过了，不需要再次匹配
				IF V_LEFTMONEY != 0 THEN 
					
					IF V_BANKMONEY >= V_LEFTMONEY THEN
					--此次匹配的金额
					V_RELMONEY := V_LEFTMONEY;
					--剩余未匹配的银行金额--用以循环业务表再次匹配
					V_BANKMONEY := V_BANKMONEY - V_LEFTMONEY;
					ELSE
						--此次匹配的金额
						V_RELMONEY := V_BANKMONEY;
						--剩余未匹配的银行金额
						V_BANKMONEY :=0;
					END IF;
					
					--更新备付金业务关联明细表
					BEGIN
						INSERT INTO TF_B_BFJ_CHECK
						(TRADEID,BANKTRADEID,SYSTEMTRADEID,TRADECODE,MONEY,
						BANKUSEDMONEY,BANKLEFTMONEY,TRADEUSEDMONEY,TRADELEFTMONEY,
						OPERATESTAFFNO,OPERATETIME)
						SELECT V_SEQ,TRADEID,V_TRADEID,'1',V_RELMONEY,
						NVL(USEDMONEY,0),NVL(LEFTMONEY,0),V_USEDMONEY,V_LEFTMONEY,
						P_CURROPER,V_TODAY
						FROM TF_F_BFJ_OCAB T WHERE T.TRADEID = V_C.F3;
						
						IF  SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
						EXCEPTION WHEN OTHERS THEN
							P_RETCODE := 'S05001B002'; P_RETMSG  := '更新备付金业务关联明细表失败,' || SQLERRM;
							ROLLBACK; RETURN;
					END;
					
					 --更新账单关联表
					BEGIN
					INSERT INTO TF_F_BFJ_BANKRELATION
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,MONEY,UPDATESTAFFNO,UPDATETIME)
					VALUES(V_SEQ,V_C.F3,V_TRADEID,V_RELMONEY,P_CURROPER,V_TODAY);
					EXCEPTION
						WHEN OTHERS THEN
							P_RETCODE := 'S05001B003'; P_RETMSG  := '更新账单关联表失败,' || SQLERRM;
							ROLLBACK; RETURN;
					END;
					
					--更新银行业务表
					BEGIN
						UPDATE TF_F_BFJ_OCAB T
						SET T.LEFTMONEY = DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY) - V_RELMONEY,
							T.USEDMONEY = NVL(T.USEDMONEY,0) + V_RELMONEY
						WHERE T.TRADEID = V_C.F3;
						EXCEPTION
						WHEN OTHERS THEN
							P_RETCODE :='S05001B004'; P_RETMSG :='更新银行备付金交易明细表失败'|| SQLERRM;
						ROLLBACK; RETURN;
					END;
					
					--更新网点业务表
					BEGIN
					UPDATE TF_F_BFJ_TRADERECORD T
						SET T.LEFTMONEY = NVL(T.LEFTMONEY,0) - V_RELMONEY,
							T.USEDMONEY = NVL(T.USEDMONEY,0)+ V_RELMONEY
					WHERE T.TRADEID = V_TRADEID;
					EXCEPTION
						WHEN OTHERS THEN
							P_RETCODE :='S05001B005'; P_RETMSG :='更新系统业务账单表失败'|| SQLERRM;
						ROLLBACK; RETURN;
					END;
				
					--当需要匹配的银行金额为0时，此次匹配结束，跳出循环，继续下次银行与业务的匹配
					EXIT WHEN V_BANKMONEY = 0 ;
					END IF;
			END LOOP inner;
		END LOOP outer;
	END IF;
	
	--银行少于业务
	IF V_BANKCOUNT < V_TRADECOUNT THEN
		<<outer>>
		FOR V_C IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1') LOOP
			
			--此次需要匹配的业务金额
			V_TRADEMONEY := V_C.F2;
			
			--循环业务
			FOR	V_D IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '0') LOOP
				--GET TRADE ID
				SP_GETSEQ(SEQ => V_SEQ);
				--每次循环时，此次匹配金额重置为0
				V_RELMONEY := 0;
				
				--查询银行业务的已匹配金额
				BEGIN
				SELECT DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY),DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY),T.TRADEID INTO V_USEDMONEY,V_LEFTMONEY,V_TRADEID
				FROM TF_F_BFJ_OCAB T  WHERE T.TRADEID = V_D.F3;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						P_RETCODE := 'S05001B006'; P_RETMSG  := '查询银行备付金交易明细表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--业务未使用金额为0表示勾选的业务已经匹配过了，不需要再次匹配
				IF V_LEFTMONEY != 0 THEN 
				--业务金额>银行未使用金额
				IF V_TRADEMONEY >= V_LEFTMONEY THEN
					--此次匹配的金额
					V_RELMONEY := V_LEFTMONEY;
					--剩余未匹配的银行金额--用以循环业务表再次匹配
					V_TRADEMONEY := V_TRADEMONEY - V_LEFTMONEY;
				ELSE
					--此次匹配的金额
					V_RELMONEY := V_TRADEMONEY;
					--剩余未匹配的银行金额
					V_TRADEMONEY :=0;
				END IF;
				
				--更新备付金业务关联明细表
				BEGIN
					INSERT INTO TF_B_BFJ_CHECK
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,TRADECODE,MONEY,
					BANKUSEDMONEY,BANKLEFTMONEY,TRADEUSEDMONEY,TRADELEFTMONEY,
					OPERATESTAFFNO,OPERATETIME)
					SELECT V_SEQ,V_TRADEID,TRADEID,'1',V_RELMONEY,
					V_USEDMONEY,V_LEFTMONEY,NVL(USEDMONEY,0),NVL(LEFTMONEY,0),
					P_CURROPER,V_TODAY
					FROM TF_F_BFJ_TRADERECORD T WHERE T.TRADEID = V_C.F3;
					
					IF  SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
					EXCEPTION WHEN OTHERS THEN
						P_RETCODE := 'S05001B002'; P_RETMSG  := '更新备付金业务关联明细表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				 --更新账单关联表
				BEGIN
				INSERT INTO TF_F_BFJ_BANKRELATION
				(TRADEID,BANKTRADEID,SYSTEMTRADEID,MONEY,UPDATESTAFFNO,UPDATETIME)
				VALUES(V_SEQ,V_TRADEID,V_C.F3,V_RELMONEY,P_CURROPER,V_TODAY);
				EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE := 'S05001B003'; P_RETMSG  := '更新账单关联表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--更新银行业务表
				BEGIN
					UPDATE TF_F_BFJ_OCAB T
					SET T.LEFTMONEY = DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY) - V_RELMONEY,
						T.USEDMONEY = NVL(T.USEDMONEY,0) + V_RELMONEY
					WHERE T.TRADEID = V_TRADEID;
					EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B001'; P_RETMSG :='更新银行备付金交易明细表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;
				
				--更新网点业务表
				BEGIN
				UPDATE TF_F_BFJ_TRADERECORD T
					SET T.LEFTMONEY = NVL(T.LEFTMONEY,0) - V_RELMONEY,
						T.USEDMONEY = NVL(T.USEDMONEY,0)+ V_RELMONEY
				WHERE T.TRADEID = V_C.F3;
				EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B001'; P_RETMSG :='更新银行备付金交易明细表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;
				
				--当需要匹配的业务金额为0时，此次匹配结束，跳出循环，继续下次业务与银行的匹配
				EXIT WHEN V_TRADEMONEY = 0 ;
				END IF;
			END LOOP INNER;
		END LOOP OUTER;
	END IF;
	
	--更新解款确认表
	FOR V_C IN (SELECT F2,F3,F4 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1') LOOP
		
		--校验业务日期是否已经入金确认
		BEGIN
		SELECT COUNT(1) INTO V_TASK FROM TF_F_BFJ_TASK WHERE ISINMATCH = '1' AND BFJDATE = V_C.F4;
			EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
		END;
		
		IF V_TASK > 0 THEN
				P_RETCODE :='S05001B017'; P_RETMSG :='日期'||V_C.F4||'已经入金确认,不能解款';
			ROLLBACK; RETURN;
		END IF;
		
		--GET TRADE ID
		SP_GETSEQ(SEQ => V_SEQ);
		
		--更新网点解款确认表
		BEGIN
		INSERT INTO TF_F_BFJ_STAFFCONFIRM
		(TRADEID,CONFIRMDATE,DEPTID,CONFIRMMONEY,OPERATESTAFFNO,OPERATETIME)
		VALUES(V_SEQ,V_C.F4,P_DEPTID,V_C.F2,P_CURROPER,V_TODAY);
		EXCEPTION
			WHEN OTHERS THEN
				P_RETCODE :='S05001B007'; P_RETMSG :='更新解款确认表失败'|| SQLERRM;
			ROLLBACK; RETURN;
		END;
	END LOOP;

    P_RETCODE := '0000000000'; P_RETMSG := '';
    COMMIT;RETURN;
END;
/

SHOW ERRORS