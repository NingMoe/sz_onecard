/* ------------------------------------
COPYRIGHT (C) 2010-2015 LINKAGE SOFTWARE 
 ALL RIGHTS RESERVED.
<AUTHOR>JIANGBB</AUTHOR>
<CREATEDATE>2014-08-08</CREATEDATE>
<DESCRIPTION>入金确认存储过程</DESCRIPTION>
------------------------------------ */
CREATE OR REPLACE PROCEDURE SP_PN_FinanceInAdd
(
	P_SESSIONID			VARCHAR2,	--SESSIONID
	
	P_CURROPER          CHAR,
    P_CURRDEPT          CHAR,
    P_RETCODE   		OUT CHAR, -- RETURN CODE
    P_RETMSG    		OUT VARCHAR2  -- RETURN MESSAGE
)
AS		
    V_SEQ				CHAR(16);
	V_TRADEID			VARCHAR2(30);
	V_SYNTAG			CHAR(1);
	V_ORDERNO			CHAR(16);		--批次号
	V_USEDMONEY			INT;			--已使用金额
	V_LEFTMONEY			INT;			--未使用金额
	V_BANKMONEY			INT;			--需要匹配的银行金额
	V_TRADEMONEY		INT;			--需要匹配的业务金额
	V_RELMONEY			INT;			--真实每次最小匹配的金额
	V_BANKCOUNT			INT:= 0;		--勾选的银行总金额
	V_TRADECOUNT		INT:= 0;		--勾选的业务总金额
	V_SCOPECODE			CHAR(2);
	V_TODAY         	DATE := SYSDATE;
	V_RSRV1				VARCHAR(10);
	V_EX				EXCEPTION;
BEGIN
	
	--生成此次操作的批次号
	SP_GETSEQ(SEQ => V_ORDERNO);

	--银行勾选数量
	BEGIN
	SELECT SUM(F2) INTO V_BANKCOUNT FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '0';
	EXCEPTION
		WHEN NO_DATA_FOUND THEN NULL;
	END;
	
	--业务勾选数量
	BEGIN
	SELECT SUM(F2) INTO V_TRADECOUNT FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1';
	EXCEPTION
		WHEN NO_DATA_FOUND THEN NULL;
	END;
	
	--银行金额<业务金额
	IF V_BANKCOUNT <= V_TRADECOUNT THEN
		
		--金额相等的
		<<outer>>
		FOR V_C IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '0' AND F5 IS NULL ORDER BY F2) LOOP
		
			--此次需要匹配的银行金额
			V_BANKMONEY := V_C.F2;
			
			--循环业务
			<<inner>>
			FOR	V_D IN (SELECT F2,F3,F4 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1' AND F5 IS NULL AND F2 = V_BANKMONEY ORDER BY F2) LOOP
				--GET TRADE ID
				SP_GETSEQ(SEQ => V_SEQ);
				--每次循环时，此次匹配金额重置为0
				V_RELMONEY := 0;
				
				--查询网点业务的已匹配金额
				BEGIN
				SELECT DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY),DECODE(T.LEFTMONEY,NULL,0,T.LEFTMONEY),T.TRADEID INTO V_USEDMONEY,V_LEFTMONEY,V_TRADEID
				FROM TF_F_BFJ_TRADERECORD T  WHERE T.TRADEID = V_D.F3;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						P_RETCODE := 'S05001B001'; P_RETMSG  := '查询网点业务信息失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				
				--此次匹配的金额
				V_RELMONEY := V_BANKMONEY;
				--剩余未匹配的银行金额
				V_BANKMONEY :=0;
				
				--更新备付金业务关联明细表
				BEGIN
					INSERT INTO TF_B_BFJ_CHECK
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,TRADECODE,MONEY,
					BANKUSEDMONEY,BANKLEFTMONEY,TRADEUSEDMONEY,TRADELEFTMONEY,
					OPERATESTAFFNO,OPERATETIME)
					SELECT V_SEQ,TRADEID,V_TRADEID,'1',V_RELMONEY,
					NVL(USEDMONEY,TRADECHARGE),NVL(LEFTMONEY,0),V_USEDMONEY,V_LEFTMONEY,
					P_CURROPER,V_TODAY
					FROM TF_F_BFJ_OCAB T WHERE T.TRADEID = V_C.F3;
					
					IF  SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
					EXCEPTION WHEN OTHERS THEN
						P_RETCODE := 'S05001B002'; P_RETMSG  := '更新备付金业务关联明细表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--更新账单关联表
				BEGIN
					INSERT INTO TF_F_BFJ_BANKRELATION
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,MONEY,UPDATESTAFFNO,UPDATETIME,ORDERNO)
					VALUES(V_SEQ,V_C.F3,V_TRADEID,V_RELMONEY,P_CURROPER,V_TODAY,V_ORDERNO);
					EXCEPTION
						WHEN OTHERS THEN
							P_RETCODE := 'S05001B003'; P_RETMSG  := '更新账单关联表失败,' || SQLERRM;
							ROLLBACK; RETURN;
				END;
				
				--更新网点业务表
				BEGIN
				UPDATE TF_F_BFJ_TRADERECORD T
					SET T.LEFTMONEY = T.LEFTMONEY - V_RELMONEY,
						T.USEDMONEY = T.USEDMONEY + V_RELMONEY,
						T.ISFINANCEIN = '1'
				WHERE T.TRADEID = V_TRADEID;
				EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B005'; P_RETMSG :='更新系统业务账单表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;

				--更新银行业务表
				BEGIN
					UPDATE TF_F_BFJ_OCAB T
					SET T.LEFTMONEY = DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY) - V_RELMONEY,
						T.USEDMONEY = DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY) + V_RELMONEY
					WHERE T.TRADEID = V_C.F3;
					EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B004'; P_RETMSG :='更新银行备付金交易明细表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;
				
				--去掉临时表中已经匹配的记录
				BEGIN
					UPDATE TMP_COMMON SET F5 = 'OK' WHERE F0 = P_SESSIONID AND F1 = '0' AND F2 = V_C.F2;
					UPDATE TMP_COMMON SET F5 = 'OK' WHERE F0 = P_SESSIONID AND F1 = '1' AND F2 = V_D.F2;
				END;
				
				--当需要匹配的银行金额为0时，此次匹配结束，跳出循环，继续下次银行与业务的匹配
				EXIT WHEN V_BANKMONEY = 0 ;
			END LOOP inner;
		END LOOP outer;
		
		--两边金额没有一致数据的匹配
		<<outer>>
		FOR V_C IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '0' AND F5 IS NULL ORDER BY F2) LOOP
		
			--此次需要匹配的银行金额
			V_BANKMONEY := V_C.F2;
			
			--循环业务
			<<inner>>
			FOR	V_D IN (SELECT F2,F3,F4 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1' AND F5 IS NULL ORDER BY F2) LOOP
				--GET TRADE ID
				SP_GETSEQ(SEQ => V_SEQ);
				--每次循环时，此次匹配金额重置为0
				V_RELMONEY := 0;
				
				--查询网点业务的已匹配金额
				BEGIN
				SELECT DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY),DECODE(T.LEFTMONEY,NULL,0,T.LEFTMONEY),T.TRADEID INTO V_USEDMONEY,V_LEFTMONEY,V_TRADEID
				FROM TF_F_BFJ_TRADERECORD T  WHERE T.TRADEID = V_D.F3;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						P_RETCODE := 'S05001B001'; P_RETMSG  := '查询网点业务信息失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--业务未使用金额为0表示勾选的业务已经匹配过了，不需要再次匹配
				IF V_LEFTMONEY != 0 THEN 
				IF V_LEFTMONEY > 0 THEN
						--银行金额>业务未使用金额
					IF V_BANKMONEY >= V_LEFTMONEY THEN
						--此次匹配的金额
						V_RELMONEY := V_LEFTMONEY;
						--剩余未匹配的银行金额--用以循环业务表再次匹配
						V_BANKMONEY := V_BANKMONEY - V_LEFTMONEY;
					ELSE
						--此次匹配的金额
						V_RELMONEY := V_BANKMONEY;
						--剩余未匹配的银行金额
						V_BANKMONEY :=0;
					END IF;
				ELSE
					--此次匹配的金额
					V_RELMONEY := V_LEFTMONEY;
					--剩余未匹配的银行金额
					V_BANKMONEY :=V_BANKMONEY - V_LEFTMONEY;
				END IF;
				
				--更新备付金业务关联明细表
				BEGIN
					INSERT INTO TF_B_BFJ_CHECK
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,TRADECODE,MONEY,
					BANKUSEDMONEY,BANKLEFTMONEY,TRADEUSEDMONEY,TRADELEFTMONEY,
					OPERATESTAFFNO,OPERATETIME)
					SELECT V_SEQ,TRADEID,V_TRADEID,'1',V_RELMONEY,
					NVL(USEDMONEY,0),NVL(LEFTMONEY,0),V_USEDMONEY,V_LEFTMONEY,
					P_CURROPER,V_TODAY
					FROM TF_F_BFJ_OCAB T WHERE T.TRADEID = V_C.F3;
					
					IF  SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
					EXCEPTION WHEN OTHERS THEN
						P_RETCODE := 'S05001B002'; P_RETMSG  := '更新备付金业务关联明细表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--更新账单关联表
				BEGIN
					INSERT INTO TF_F_BFJ_BANKRELATION
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,MONEY,UPDATESTAFFNO,UPDATETIME,ORDERNO)
					VALUES(V_SEQ,V_C.F3,V_TRADEID,V_RELMONEY,P_CURROPER,V_TODAY,V_ORDERNO);
					EXCEPTION
						WHEN OTHERS THEN
							P_RETCODE := 'S05001B003'; P_RETMSG  := '更新账单关联表失败,' || SQLERRM;
							ROLLBACK; RETURN;
				END;
				
				--更新网点业务表
				BEGIN
				UPDATE TF_F_BFJ_TRADERECORD T
					SET T.LEFTMONEY = T.LEFTMONEY - V_RELMONEY,
						T.USEDMONEY = T.USEDMONEY + V_RELMONEY,
						T.ISFINANCEIN = '1'
				WHERE T.TRADEID = V_TRADEID;
				EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B005'; P_RETMSG :='更新系统业务账单表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;

				--更新银行业务表
				BEGIN
					UPDATE TF_F_BFJ_OCAB T
					SET T.LEFTMONEY = DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY) - V_RELMONEY,
						T.USEDMONEY = DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY) + V_RELMONEY
					WHERE T.TRADEID = V_C.F3;
					EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B004'; P_RETMSG :='更新银行备付金交易明细表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;
				
				--当需要匹配的银行金额为0时，此次匹配结束，跳出循环，继续下次银行与业务的匹配
				EXIT WHEN V_BANKMONEY = 0 ;
				END IF;
			END LOOP inner;
		END LOOP outer;
	END IF;
	
	--银行金额>业务金额
	IF V_BANKCOUNT > V_TRADECOUNT THEN
		
		--两边单笔金额一致时优先匹配
		<<outer>>
		FOR V_C IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1' AND F5 IS NULL ORDER BY F2) LOOP
		
			--此次需要匹配的业务金额
			V_TRADEMONEY := V_C.F2;
			
			--循环业务
			<<inner>>
			FOR	V_D IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '0' AND F5 IS NULL AND F2 = V_TRADEMONEY ORDER BY F2) LOOP
				--GET TRADE ID
				SP_GETSEQ(SEQ => V_SEQ);
				--每次循环时，此次匹配金额重置为0
				V_RELMONEY := 0;
				
				--查询银行业务的各项金额
				BEGIN
				SELECT DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY),DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY),T.TRADEID INTO V_USEDMONEY,V_LEFTMONEY,V_TRADEID
				FROM TF_F_BFJ_OCAB T  WHERE T.TRADEID = V_D.F3;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						P_RETCODE := 'S05001B006'; P_RETMSG  := '查询银行备付金交易明细表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				

				--此次匹配的金额
				V_RELMONEY := V_TRADEMONEY;
				--剩余未匹配的银行金额
				V_TRADEMONEY :=0;
				
				--更新备付金业务关联明细表
				BEGIN
					INSERT INTO TF_B_BFJ_CHECK
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,TRADECODE,MONEY,
					BANKUSEDMONEY,BANKLEFTMONEY,TRADEUSEDMONEY,TRADELEFTMONEY,
					OPERATESTAFFNO,OPERATETIME)
					SELECT V_SEQ,V_TRADEID,TRADEID,'1',V_RELMONEY,
					V_USEDMONEY,V_LEFTMONEY,NVL(USEDMONEY,0),NVL(LEFTMONEY,0),
					P_CURROPER,V_TODAY
					FROM TF_F_BFJ_TRADERECORD T WHERE T.TRADEID = V_C.F3;
					
					IF  SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
					EXCEPTION WHEN OTHERS THEN
						P_RETCODE := 'S05001B002'; P_RETMSG  := '更新备付金业务关联明细表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--更新账单关联表
				BEGIN
					INSERT INTO TF_F_BFJ_BANKRELATION
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,MONEY,UPDATESTAFFNO,UPDATETIME,ORDERNO)
					VALUES(V_SEQ,V_TRADEID,V_C.F3,V_RELMONEY,P_CURROPER,V_TODAY,V_ORDERNO);
					EXCEPTION
						WHEN OTHERS THEN
							P_RETCODE := 'S05001B003'; P_RETMSG  := '更新账单关联表失败,' || SQLERRM;
							ROLLBACK; RETURN;
				END;
				
				--更新网点业务表
				BEGIN
				UPDATE TF_F_BFJ_TRADERECORD T
					SET T.LEFTMONEY = T.LEFTMONEY - V_RELMONEY,
						T.USEDMONEY = T.USEDMONEY + V_RELMONEY,
						T.ISFINANCEIN = '1'
				WHERE T.TRADEID = V_C.F3;
				EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B005'; P_RETMSG :='更新系统业务账单表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;

				--更新银行业务表
				BEGIN
					UPDATE TF_F_BFJ_OCAB T
					SET T.LEFTMONEY = DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY) - V_RELMONEY,
						T.USEDMONEY = DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY) + V_RELMONEY
					WHERE T.TRADEID = V_TRADEID;
					EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B004'; P_RETMSG :='更新银行备付金交易明细表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;
				
				--去掉临时表中已经匹配的记录
				BEGIN
					UPDATE TMP_COMMON SET F5 = 'OK' WHERE F0 = P_SESSIONID AND F1 = '0' AND F2 = V_C.F2;
					UPDATE TMP_COMMON SET F5 = 'OK' WHERE F0 = P_SESSIONID AND F1 = '1' AND F2 = V_D.F2;
				END;
				
				--当需要匹配的业务金额为0时，此次匹配结束，跳出循环，继续下次业务与银行的匹配
				EXIT WHEN V_TRADEMONEY = 0 ;
			END LOOP inner;
		END LOOP outer;
		
		--两边没有单笔金额一致时匹配
		<<outer>>
		FOR V_C IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '1' AND F5 IS NULL ORDER BY F2) LOOP
		
			--此次需要匹配的业务金额
			V_TRADEMONEY := V_C.F2;
			
			--循环业务
			<<inner>>
			FOR	V_D IN (SELECT F2,F3 FROM TMP_COMMON WHERE F0 = P_SESSIONID AND F1 = '0' AND F5 IS NULL ORDER BY F2) LOOP
				--GET TRADE ID
				SP_GETSEQ(SEQ => V_SEQ);
				--每次循环时，此次匹配金额重置为0
				V_RELMONEY := 0;
				
				--查询银行业务的各项金额
				BEGIN
				SELECT DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY),DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY),T.TRADEID INTO V_USEDMONEY,V_LEFTMONEY,V_TRADEID
				FROM TF_F_BFJ_OCAB T  WHERE T.TRADEID = V_D.F3;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						P_RETCODE := 'S05001B006'; P_RETMSG  := '查询银行备付金交易明细表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--业务未使用金额为0表示勾选的业务已经匹配过了，不需要再次匹配
				IF V_LEFTMONEY != 0 THEN 
				IF V_TRADEMONEY > 0 THEN
					--业务金额>银行未使用金额
					IF V_TRADEMONEY >= V_LEFTMONEY THEN
						--此次匹配的金额
						V_RELMONEY := V_LEFTMONEY;
						--剩余未匹配的银行金额--用以循环业务表再次匹配
						V_TRADEMONEY := V_TRADEMONEY - V_LEFTMONEY;
					ELSE
						--此次匹配的金额
						V_RELMONEY := V_TRADEMONEY;
						--剩余未匹配的银行金额
						V_TRADEMONEY :=0;
					END IF;
				ELSE
					--此次匹配的金额
					V_RELMONEY := V_TRADEMONEY;
					--剩余未匹配的银行金额
					V_TRADEMONEY :=0;
				END IF;
				
				--更新备付金业务关联明细表
				BEGIN
					INSERT INTO TF_B_BFJ_CHECK
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,TRADECODE,MONEY,
					BANKUSEDMONEY,BANKLEFTMONEY,TRADEUSEDMONEY,TRADELEFTMONEY,
					OPERATESTAFFNO,OPERATETIME)
					SELECT V_SEQ,V_TRADEID,TRADEID,'1',V_RELMONEY,
					V_USEDMONEY,V_LEFTMONEY,NVL(USEDMONEY,0),NVL(LEFTMONEY,0),
					P_CURROPER,V_TODAY
					FROM TF_F_BFJ_TRADERECORD T WHERE T.TRADEID = V_C.F3;
					
					IF  SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
					EXCEPTION WHEN OTHERS THEN
						P_RETCODE := 'S05001B002'; P_RETMSG  := '更新备付金业务关联明细表失败,' || SQLERRM;
						ROLLBACK; RETURN;
				END;
				
				--更新账单关联表
				BEGIN
					INSERT INTO TF_F_BFJ_BANKRELATION
					(TRADEID,BANKTRADEID,SYSTEMTRADEID,MONEY,UPDATESTAFFNO,UPDATETIME,ORDERNO)
					VALUES(V_SEQ,V_TRADEID,V_C.F3,V_RELMONEY,P_CURROPER,V_TODAY,V_ORDERNO);
					EXCEPTION
						WHEN OTHERS THEN
							P_RETCODE := 'S05001B003'; P_RETMSG  := '更新账单关联表失败,' || SQLERRM;
							ROLLBACK; RETURN;
				END;
				
				--更新网点业务表
				BEGIN
				UPDATE TF_F_BFJ_TRADERECORD T
					SET T.LEFTMONEY = T.LEFTMONEY - V_RELMONEY,
						T.USEDMONEY = T.USEDMONEY + V_RELMONEY,
						T.ISFINANCEIN = '1'
				WHERE T.TRADEID = V_C.F3;
				EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B005'; P_RETMSG :='更新系统业务账单表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;

				--更新银行业务表
				BEGIN
					UPDATE TF_F_BFJ_OCAB T
					SET T.LEFTMONEY = DECODE(T.LEFTMONEY,NULL,T.TRADECHARGE,T.LEFTMONEY) - V_RELMONEY,
						T.USEDMONEY = DECODE(T.USEDMONEY,NULL,0,T.USEDMONEY) + V_RELMONEY
					WHERE T.TRADEID = V_TRADEID;
					EXCEPTION
					WHEN OTHERS THEN
						P_RETCODE :='S05001B004'; P_RETMSG :='更新银行备付金交易明细表失败'|| SQLERRM;
					ROLLBACK; RETURN;
				END;
				
				--当需要匹配的业务金额为0时，此次匹配结束，跳出循环，继续下次业务与银行的匹配
				EXIT WHEN V_TRADEMONEY = 0 ;
				END IF;
			END LOOP inner;
		END LOOP outer;
	END IF;
	

    P_RETCODE := '0000000000'; P_RETMSG := '';
    COMMIT;RETURN;
END;
/

SHOW ERRORS