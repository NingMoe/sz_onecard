-- =============================================
-- AUTHOR:		liuhe
-- CREATE DATE: 2012-08-31
-- DESCRIPTION:	礼金卡批量售卡调用，校验与售卡
-- =============================================
CREATE OR REPLACE PROCEDURE SP_CG_BatchSaleCard
(
    P_BATCHID		  CHAR, -- 批次号
    P_CARDNO          CHAR, -- 读卡-卡号-16位卡号
    P_ASN             CHAR, -- 读卡-ASN
    P_WALLET1         INT , -- 读卡-电子钱包余额1
    P_WALLET2         INT , -- 读卡-电子钱包余额2
    P_STARTDATE       CHAR, -- 读卡-起始有效期(YYYYMMDD)
    P_ENDDATE         CHAR, -- 读卡-结束有效期(YYYYMMDD)
    P_ONLINETRADENO   CHAR, -- 读卡-联机交易序号
    P_OFFLINETRADENO  CHAR, -- 读卡-联机交易序号
	P_CURRCARDNO      CHAR, -- 操作员卡号
	P_ID		      CHAR, -- 现金台账表ID
	P_TRADEID       OUT CHAR,--台账ID

    P_CURROPER        CHAR,
    P_CURRDEPT        CHAR,
    P_RETCODE     OUT CHAR,
    P_RETMSG      OUT VARCHAR2
)
AS
	V_TODAY           DATE:= SYSDATE;
    V_SEQ             CHAR(16);
	V_TRADETYPECODE   CHAR(2); --业务类型编码
    V_CARDTYPE     TL_R_ICUSER.CARDTYPECODE%TYPE;    -- 卡片类型
    V_CARDSTATE    TL_R_ICUSER.RESSTATECODE%TYPE;    -- 卡片状态
    V_CARDPRICE    TL_R_ICUSER.CARDPRICE%TYPE;    	 -- 卡片单价
    V_CARDDEPT     TL_R_ICUSER.ASSIGNEDDEPARTID%TYPE;-- 归属部门
    V_RECLAIMTIME  TL_R_ICUSER.RECLAIMTIME%TYPE;     -- 回收时间
	V_SALEMONEY    TL_R_ICUSER.CARDPRICE%TYPE;    	 -- 卡片单价
	V_EX 		EXCEPTION;
	V_WRITECARDSCRIPT  VARCHAR2(100); --写卡脚本
	v_ISNEWTAG       CHAR(1);
BEGIN
	
    -- 1) 检查电子钱包1余额是否为0
    IF P_BATCHID IS NULL OR P_CARDNO IS NULL 
						 OR P_ASN IS NULL 
						 OR P_WALLET1 IS NULL 
						 OR P_WALLET2 IS NULL 
						 OR P_STARTDATE IS NULL
						 OR P_ENDDATE IS NULL 
						 OR P_ONLINETRADENO IS NULL
						 OR P_OFFLINETRADENO IS NULL
	THEN
		    P_RETCODE := '-20100';
			P_RETMSG  := '参数不正确';
			RETURN;
    END IF;
	
    -- 2) 检查电子钱包1余额是否为0
    IF P_WALLET1 <> 0 THEN
		    P_RETCODE := '-20101';
			P_RETMSG  := '电子钱包余额为'|| P_WALLET1/100.0 || '元, 要求为0才能售卡';
			RETURN;
    END IF;

    -- 3) 检查卡类型是否为礼金卡,卡片单价是否等于电子钱包2
    BEGIN
        SELECT T.CARDTYPECODE, T.CARDPRICE, T.RESSTATECODE, T.ASSIGNEDDEPARTID,
               T.RECLAIMTIME
        INTO   V_CARDTYPE, V_CARDPRICE, V_CARDSTATE, V_CARDDEPT,
               V_RECLAIMTIME
        FROM   TL_R_ICUSER T
        WHERE  T.CARDNO = P_CARDNO;
    EXCEPTION WHEN NO_DATA_FOUND THEN
			P_RETCODE := '-20102';
			P_RETMSG  := '卡片不存在于库存之中';
			RETURN;
    END;

    IF V_CARDTYPE != '05' THEN
		P_RETCODE := '-20103';
		P_RETMSG  := '卡片不是礼金卡类型';
		RETURN;	
    END IF;

    IF V_CARDPRICE <> P_WALLET2 THEN
       
		P_RETCODE := '-20104';
		P_RETMSG  := '卡片库存价格为' || V_CARDPRICE/100.0|| '元, 卡内钱包2为' || P_WALLET2/100.0 || '元, 无法售卡';
		RETURN;
    END IF;

    -- 4) 检查库存状态
    IF V_CARDSTATE IN ('01', '05') THEN -- 出库分配状态
	V_TRADETYPECODE := '50';
        IF V_CARDDEPT != P_CURRDEPT THEN
		P_RETCODE := '-20105';
		P_RETMSG  := '卡片不属于当前部门';
		RETURN;
        END IF;
		
    ELSIF V_CARDSTATE = '04' THEN -- 回收状态
	V_TRADETYPECODE := '51';
	
        select ISNEWTAG into v_ISNEWTAG
        from (
            select ISNEWTAG 
            from TF_B_TRADE_CASHGIFT 
            where cardno = p_cardNo 
            and TRADETYPECODE = '52' --回收
            order by OPERATETIME desc
        )
		where rownum = 1;
        if v_ISNEWTAG  is null then --如果不是新回收的记录
            -- 检查回收时间是否超过4个月
            if add_months(v_reclaimtime, 4) > sysdate then
            raise_application_error(-20106, '卡片回收时间为'
                || to_char(v_reclaimtime, 'yyyy-MM-dd')
                || ', 回收超过4个月后才能再售卡');
            end if;		
		end if;
		
        IF V_CARDDEPT != P_CURRDEPT THEN
		P_RETCODE := '-20105';
		P_RETMSG  := '卡片不属于当前部门';
		RETURN;
        END IF;
    ELSE
		P_RETCODE := '-20207';
		P_RETMSG  := '卡片库存状态不是出库或者回收状态';
		RETURN;
    END IF;

    -- 5) 检查售卡金额
	BEGIN
		SELECT CURRNETMONEY INTO V_SALEMONEY  FROM TF_B_TRADE_BATCH 
		WHERE BATCHID = P_BATCHID AND OPERATETYPECODE='01' AND TRADETYPECODE='50';
	
		EXCEPTION WHEN NO_DATA_FOUND THEN
			P_RETCODE := 'S009009902';
			P_RETMSG  := '批量售卡台账查询售卡金额失败' || SQLERRM;	
			RETURN;			
	END;
	
	--- 6）卡片输入金额检查
	IF V_SALEMONEY <= P_WALLET2 THEN
		P_RETCODE := '-20208';
		P_RETMSG  := '卡片输入金额必须大于押金金额';
		RETURN;	
    END IF;
	
	IF V_SALEMONEY > 100000 THEN
		P_RETCODE := '-20209';
		P_RETMSG  := '卡片输入金额不能超过一千元';
		RETURN;	
    END IF;	
	
	---- 7) 售卡
	IF V_CARDSTATE = '04' THEN
	-- 回收状态再售卡时，备份售卡处理相关表
	-- 备份卡资料表
		BEGIN
		INSERT INTO TB_F_CARDREC(
			CARDNO,REUSEDATE,ASN,CARDTYPECODE,CARDSURFACECODE,CARDMANUCODE,
			CARDCHIPTYPECODE,APPTYPECODE,APPVERNO,DEPOSIT,CARDCOST,PRESUPPLYMONEY,
			CUSTRECTYPECODE,SELLTIME,SELLCHANNELCODE,DEPARTNO,STAFFNO,CARDSTATE,
			USETAG,SERSTARTTIME,SERTAKETAG,SERVICEMONEY,UPDATESTAFFNO,UPDATETIME,
			RSRV1,RSRV2,RSRV3,REMARK)
		SELECT
			CARDNO,SYSDATE,ASN,CARDTYPECODE,CARDSURFACECODE,CARDMANUCODE,
			CARDCHIPTYPECODE,APPTYPECODE,APPVERNO,DEPOSIT,CARDCOST,PRESUPPLYMONEY,
			CUSTRECTYPECODE,SELLTIME,SELLCHANNELCODE,DEPARTNO,STAFFNO,CARDSTATE,
			USETAG,SERSTARTTIME,SERSTAKETAG,SERVICEMONEY,UPDATESTAFFNO,UPDATETIME,
			RSRV1,RSRV2,RSRV3,REMARK
		FROM TF_F_CARDREC
		WHERE CARDNO = P_CARDNO;

		DELETE FROM TF_F_CARDREC
		WHERE CARDNO = P_CARDNO;

		-- 电子钱包账户表
		INSERT INTO TB_F_CARDEWALLETACC(
			CARDNO,REUSEDATE,CARDACCMONEY,USETAG,CREDITSTATECODE,
			CREDITSTACHANGETIME,CREDITCONTROLCODE,CREDITCOLCHANGETIME,
			ACCSTATECODE,CONSUMEREALMONEY,SUPPLYREALMONEY,
			TOTALCONSUMETIMES,TOTALSUPPLYTIMES,TOTALCONSUMEMONEY,
			TOTALSUPPLYMONEY,FIRSTCONSUMETIME,LASTCONSUMETIME,
			FIRSTSUPPLYTIME,LASTSUPPLYTIME,OFFLINECARDTRADENO,
			ONLINECARDTRADENO,RSRV1,RSRV2,RSRV3,REMARK)
		SELECT
			CARDNO,SYSDATE,CARDACCMONEY,USETAG,CREDITSTATECODE,
			CREDITSTACHANGETIME,CREDITCONTROLCODE,CREDITCOLCHANGETIME,
			ACCSTATECODE,CONSUMEREALMONEY,SUPPLYREALMONEY,
			TOTALCONSUMETIMES,TOTALSUPPLYTIMES,TOTALCONSUMEMONEY,
			TOTALSUPPLYMONEY,FIRSTCONSUMETIME,LASTCONSUMETIME,
			FIRSTSUPPLYTIME,LASTSUPPLYTIME,OFFLINECARDTRADENO,
			ONLINECARDTRADENO,RSRV1,RSRV2,RSRV3,REMARK
		FROM TF_F_CARDEWALLETACC
		WHERE CARDNO = P_CARDNO;

		DELETE FROM TF_F_CARDEWALLETACC
		WHERE CARDNO = P_CARDNO;

		-- 客户资料表直接删除
		DELETE FROM TF_F_CUSTOMERREC
		WHERE CARDNO = P_CARDNO;
		
		EXCEPTION WHEN OTHERS THEN
		P_RETCODE := 'S009009904';
		P_RETMSG  := '回收状态再售卡时，备份售卡处理相关表失败';
		ROLLBACK; RETURN;
		END;
	END IF;

	--- 调用售卡存储过程
	BEGIN
		
	-- 服务费收取标记serTakeTag为5
    -- 客户资料类型custRecTypeCode为0
	  SP_PB_SALECARD(P_ID,
        P_CARDNO, V_CARDPRICE, 0, 0, P_ONLINETRADENO, V_CARDTYPE,
        0, '01', '5', V_TRADETYPECODE,'',
        '', '', '', '', '','', '', '', '',
        '0', '112233445566', P_CURRCARDNO,
        V_TODAY, V_SEQ, P_CURROPER, P_CURRDEPT, P_RETCODE, P_RETMSG);
	
		P_TRADEID := V_SEQ;
     IF P_RETCODE != '0000000000' THEN RAISE V_EX; END IF;
        EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK; RETURN;
    END;
    
	BEGIN	
	
		SELECT 'startCashGiftCard(''' || TO_CHAR(V_TODAY, 'YYYYMMDD') || ''',''20501231'', ' || (V_SALEMONEY - V_CARDPRICE) || ');'
		INTO V_WRITECARDSCRIPT
		FROM DUAL;
	
		-- 修正写卡台帐CARDTRADENO
		UPDATE TF_CARD_TRADE T
		SET    T.CARDTRADENO     = P_ONLINETRADENO,
			   T.LMONEY          = V_SALEMONEY - V_CARDPRICE,
			   T.WRITECARDSCRIPT = V_WRITECARDSCRIPT
		WHERE  T.TRADEID = V_SEQ;

		-- 修正卡片失效日期
		UPDATE TF_F_CARDREC T
		SET    T.VALIDENDDATE = '20501231'
		WHERE  T.CARDNO       = P_CARDNO;

		-- 修正现金台帐，增加充值金额
		UPDATE TF_B_TRADEFEE T
		SET    T.SUPPLYMONEY = V_SALEMONEY - V_CARDPRICE
		WHERE  T.TRADEID = V_SEQ;

		-- 修正卡账户信息
		UPDATE TF_F_CARDEWALLETACC T
		SET    T.CARDACCMONEY     = V_SALEMONEY,
			   T.SUPPLYREALMONEY  = V_SALEMONEY,
			   T.FIRSTCONSUMETIME = V_TODAY,
			   T.TOTALSUPPLYTIMES = 1,
			   T.TOTALSUPPLYMONEY = V_SALEMONEY,
			   T.LASTSUPPLYTIME   = V_TODAY
		WHERE  T.CARDNO           = P_CARDNO;
		
		EXCEPTION WHEN OTHERS THEN
		P_RETCODE := 'S009009903';
		P_RETMSG  := '售卡后修正台账表失败';
		ROLLBACK; RETURN;
	END;
	
    -- 代理营业厅抵扣预付款，根据保证金修改可领卡额度
	BEGIN
		SP_PB_DEPTBALFEE(V_SEQ, '3' ,--1预付款,2保证金,3预付款和保证金
				 V_SALEMONEY,
				 V_TODAY,P_CURROPER,P_CURRDEPT,P_RETCODE,P_RETMSG);

	IF P_RETCODE != '0000000000' THEN RAISE V_EX; END IF;
	EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK; RETURN;
	END;
    
    P_RETCODE := '0000000000';
    P_RETMSG  := '';
    COMMIT; RETURN;

END;

/
SHOW ERRORS

