-- =============================================
-- AUTHOR:		LIUHE
-- CREATE DATE: 2011-12-27
-- DESCRIPTION:	网点结算单元修改
-- MODIFY: 
-- =============================================
CREATE OR REPLACE PROCEDURE SP_PS_DEPTBALUNITMODIFY
(
    P_BALUNITNO          CHAR,
    P_BALUNIT            VARCHAR2,
    P_BALTYPE            CHAR,
    P_BANKCODE           CHAR,
    P_BANKACCNO          VARCHAR2,
    P_BALCYCLETYPECODE   CHAR,
    P_BALINTERVAL        INT,
    P_FINCYCLETYPECODE   CHAR,
    P_FININTERVAL        INT,
    P_FINTYPECODE        CHAR,
    P_FINBANKCODE        CHAR,
    P_LINKMAN            VARCHAR2,
    P_UNITPHONE          VARCHAR2, 
    P_UNITADD            VARCHAR2,
    P_UNITEMAIL          VARCHAR2,
    P_REMARK             VARCHAR2,
    P_USETAG             CHAR,
    P_WARNLINE        	INT,
    P_LIMITLINE			INT,
	
    P_APRVSTATE          CHAR,
    P_SEQNO              CHAR,
    P_KEYINFOCHANGED     CHAR,

    P_CURROPER           CHAR,
    P_CURRDEPT           CHAR,
    P_RETCODE        OUT CHAR,
    P_RETMSG         OUT VARCHAR2
)
AS
    V_CURRDATE           DATE := SYSDATE;
    V_SEQNO              CHAR(16);
    V_TRADETYPCD         CHAR(2);
    V_EX                 EXCEPTION;
	V_COUNT 	  		INT;
BEGIN
    -- 如果关键信息没有被修改，刚直接提交，不需要进行审批审核
    IF P_KEYINFOCHANGED <> 'Y' THEN
        BEGIN
            UPDATE TF_DEPT_BALUNIT
            SET
                LINKMAN       =  P_LINKMAN,
                UNITPHONE     =  P_UNITPHONE,
                UNITADD       =  P_UNITADD,
                UNITEMAIL     =  P_UNITEMAIL,
                REMARK        =  P_REMARK,
                UPDATESTAFFNO =  P_CURROPER,
                UPDATETIME    =  V_CURRDATE
            WHERE
                DBALUNITNO     =  P_BALUNITNO;

            IF SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
        EXCEPTION WHEN OTHERS THEN
            P_RETCODE := 'S008107085';
            P_RETMSG  := '更新网点结算单元表失败'|| SQLERRM;
            ROLLBACK; RETURN;
        END;

        P_RETCODE := '0000000000';
        P_RETMSG  := '';
        COMMIT; RETURN;
    END IF;
	
	--判断是否存在相同名称的结算单元,待审批
	SELECT	COUNT(*) INTO V_COUNT
	FROM  TF_B_DEPTBALTRADE  B, TH_DEPT_BALUNIT T
	WHERE B.TRADEID = T.TRADEID
		AND  B.STATECODE = '1'
		AND  T.DBALUNIT  =  P_BALUNIT AND T.DBALUNITNO != P_BALUNITNO;

	IF V_COUNT > 0 THEN
		    p_retCode := 'S008107901';
            p_retMsg  := '存在相同名称的结算单元为待审批状态';
			RETURN;
	END IF;

	--判断是否存在相同名称的结算单元,待审核
	SELECT	COUNT(*) INTO V_COUNT
	FROM  TF_B_DEPTBALTRADE_EXAM E, TH_DEPT_BALUNIT T
	WHERE E.TRADEID = T.TRADEID
		AND  E.STATECODE = '1'
		AND  T.DBALUNIT  =  P_BALUNIT AND T.DBALUNITNO != P_BALUNITNO;

	IF V_COUNT > 0 THEN
		         p_retCode := 'S008107902';
            p_retMsg  := '存在相同名称的结算单元为待审核状态';
			RETURN;
	END IF;

	--判断是否存在相同名称的结算单元,财审通过
	SELECT	COUNT(*) INTO V_COUNT
	FROM 	TF_DEPT_BALUNIT T
	WHERE  T.DBALUNIT  =  P_BALUNIT AND T.DBALUNITNO != P_BALUNITNO 
		  AND T.USETAG = '1';

	IF V_COUNT > 0 THEN
		    p_retCode := 'S008107903';
            p_retMsg  := '存在相同名称的结算单元';
			RETURN;
	END IF;

    IF P_APRVSTATE IN('1', '2') THEN -- 1: 财审作废 2: 审批通过
		BEGIN
            DELETE FROM TF_B_DEPTBALTRADE_EXAM
			WHERE TRADEID = P_SEQNO;

            IF SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
        EXCEPTION WHEN OTHERS THEN
            P_RETCODE := 'S008107095';
            P_RETMSG  := '删除网点结算单元财务审核表失败'|| SQLERRM;
            ROLLBACK; RETURN;
        END;
    END IF;

    IF P_APRVSTATE IN('1', '2', '3', '4') THEN -- 3: 审批作废 4: 等待审批
		
		BEGIN
            UPDATE TF_B_DEPTBALTRADE
			SET    STATECODE      = '1'
			,      ASSOCIATECODE  = P_BALUNITNO
			,      OPERATESTAFFNO = P_CURROPER
			,      OPERATEDEPARTID= P_CURRDEPT
			,      OPERATETIME    = V_CURRDATE
			WHERE  TRADEID = P_SEQNO;
			
            IF SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
        EXCEPTION WHEN OTHERS THEN
            P_RETCODE := 'S008107083';
            P_RETMSG  := '更新网点结算单元业务台帐主表失败'|| SQLERRM;
            ROLLBACK; RETURN;
        END;
		
        BEGIN
            UPDATE TH_DEPT_BALUNIT
			SET 	DBALUNITNO = P_BALUNITNO , DBALUNIT = P_BALUNIT,
					DEPTTYPE = P_BALTYPE ,
					BANKCODE= P_BANKCODE , BANKACCNO = P_BANKACCNO ,
					CREATETIME = V_CURRDATE , 
					BALCYCLETYPECODE = P_BALCYCLETYPECODE,
					BALINTERVAL = P_BALINTERVAL,
					FINCYCLETYPECODE = P_FINCYCLETYPECODE,
					FININTERVAL= P_FININTERVAL, FINTYPECODE = P_FINTYPECODE,
					FINBANKCODE= P_FINBANKCODE,
					PREPAYWARNLINE = P_WARNLINE,PREPAYLIMITLINE = P_LIMITLINE,
					LINKMAN= P_LINKMAN, UNITPHONE = P_UNITPHONE ,
					UNITADD= P_UNITADD , UNITEMAIL = P_UNITEMAIL , REMARK = P_REMARK
			WHERE TRADEID = P_SEQNO;
		
            IF SQL%ROWCOUNT != 1 THEN RAISE V_EX; END IF;
        EXCEPTION WHEN OTHERS THEN
            P_RETCODE := 'S008107084';
            P_RETMSG  := '更新网点结算单元历史表失败'|| SQLERRM;
            ROLLBACK; RETURN;
        END;
		
        P_RETCODE := '0000000000';
        P_RETMSG  := '';
        COMMIT; RETURN;
    END IF;


    --1) GET THE SEQUENCE NUMBER
    SP_GETSEQ(SEQ => V_SEQNO);

    --2) SET THE  V_TRADETYPCD , 1 MODIFY BALUNIT , 0 DELETE BALUNIT
    IF P_USETAG = '1' THEN
        V_TRADETYPCD := '02';
    ELSE
        V_TRADETYPCD := '03';
    END IF;

   -- 写入台账
   BEGIN
		INSERT	INTO  TF_B_DEPTBALTRADE
			(TRADEID,DTRADETYPECODE,ASSOCIATECODE,OPERATESTAFFNO,
			OPERATEDEPARTID,OPERATETIME,STATECODE)
		VALUES	(V_SEQNO,V_TRADETYPCD,P_BALUNITNO,
				P_CURROPER,P_CURRDEPT,V_CURRDATE,'1');
	 EXCEPTION
       WHEN OTHERS THEN
         P_RETCODE := 'S008107081';
         P_RETMSG  := '写入网点结算单元变更台账表失败'|| SQLERRM;
         ROLLBACK; RETURN;
   END;

    -- 添加结算单元变更表
	BEGIN

		INSERT INTO TH_DEPT_BALUNIT
			  (TRADEID, DBALUNITNO, DBALUNIT, BANKCODE, BANKACCNO, CREATETIME,
			  BALCYCLETYPECODE, BALINTERVAL, FINCYCLETYPECODE, FININTERVAL, FINTYPECODE,
			  FINBANKCODE, LINKMAN, UNITPHONE, UNITADD, UNITEMAIL, USETAG, DEPTTYPE,
			  PREPAYWARNLINE, PREPAYLIMITLINE, UPDATESTAFFNO, UPDATETIME, REMARK)
		VALUES
			  (V_SEQNO, P_BALUNITNO, P_BALUNIT, P_BANKCODE, P_BANKACCNO, V_CURRDATE,
			  P_BALCYCLETYPECODE, P_BALINTERVAL, P_FINCYCLETYPECODE, P_FININTERVAL, P_FINTYPECODE,
			  P_FINBANKCODE, P_LINKMAN, P_UNITPHONE, P_UNITADD, P_UNITEMAIL, '1', P_BALTYPE,
			  P_WARNLINE, P_LIMITLINE, P_CURROPER, SYSDATE, P_REMARK);


    EXCEPTION
       WHEN OTHERS THEN
         P_RETCODE := 'S008107082';
         P_RETMSG  := '写入网点结算单元变历史表失败'|| SQLERRM;
         ROLLBACK; RETURN;
   END;

    P_RETCODE := '0000000000';
    P_RETMSG  := '';
    COMMIT; RETURN;
END;



/
SHOW ERRORS

